"""
–ü–∞—Ä—Å–µ—Ä FunPay –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
"""

import time
import json
import asyncio
from datetime import datetime
from typing import Dict, List, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import undetected_chromedriver as uc
from bs4 import BeautifulSoup
import requests
import re

class FunPayParser:
    def __init__(self, login: str, password: str, headless: bool = True):
        self.login = login
        self.password = password
        self.headless = headless
        self.driver = None
        self.session = requests.Session()
        self.is_logged_in = False
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.selectors = {
            'login_form': 'form[action="/account/login/"]',
            'login_input': 'input[name="login"]',
            'password_input': 'input[name="password"]',
            'login_button': 'button[type="submit"]',
            'orders_link': 'a[href*="/orders/"]',
            'order_item': '.order-item',
            'order_id': '.order-id',
            'order_status': '.order-status',
            'order_amount': '.order-amount',
            'order_buyer': '.order-buyer',
            'order_description': '.order-description',
            'chat_messages': '.chat-message',
            'message_input': 'textarea[name="message"]',
            'send_button': 'button[type="submit"]'
        }
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            options = uc.ChromeOptions()
            
            if self.headless:
                options.add_argument('--headless')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
                "profile.managed_default_content_settings.images": 2
            }
            options.add_experimental_option("prefs", prefs)
            
            self.driver = uc.Chrome(options=options)
            self.driver.implicitly_wait(10)
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    async def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ FunPay"""
        try:
            if not self.driver:
                if not self.setup_driver():
                    return False
            
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ FunPay...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            self.driver.get("https://funpay.com/account/login/")
            await asyncio.sleep(3)
            
            # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
            login_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, self.selectors['login_input']))
            )
            login_input.clear()
            login_input.send_keys(self.login)
            
            # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
            password_input = self.driver.find_element(By.CSS_SELECTOR, self.selectors['password_input'])
            password_input.clear()
            password_input.send_keys(self.password)
            
            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
            login_button = self.driver.find_element(By.CSS_SELECTOR, self.selectors['login_button'])
            login_button.click()
            
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            if "account/login" not in self.driver.current_url:
                self.is_logged_in = True
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_orders(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        if not self.is_logged_in:
            if not await self.login():
                return []
        
        try:
            print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–∫–∞–∑–∞–º
            self.driver.get("https://funpay.com/orders/")
            await asyncio.sleep(3)
            
            orders = []
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            order_elements = self.driver.find_elements(By.CSS_SELECTOR, ".order-row")
            
            for order_element in order_elements:
                try:
                    order_data = self._parse_order_element(order_element)
                    if order_data:
                        orders.append(order_data)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–∞: {e}")
                    continue
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
            return orders
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def _parse_order_element(self, element) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
            order_id = self._safe_extract_text(element, ".order-id")
            status = self._safe_extract_text(element, ".order-status")
            amount_text = self._safe_extract_text(element, ".order-sum")
            buyer = self._safe_extract_text(element, ".order-buyer")
            description = self._safe_extract_text(element, ".order-desc")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã
            price = 0.0
            currency = "RUB"
            if amount_text:
                price_match = re.search(r'([\d.,]+)\s*([A-Za-z‚ÇΩ]+)', amount_text)
                if price_match:
                    price = float(price_match.group(1).replace(',', '.'))
                    currency = price_match.group(2).upper()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ telegram username –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            telegram_username = ""
            if description:
                telegram_match = re.search(r'@([a-zA-Z0-9_]{5,32})', description)
                if telegram_match:
                    telegram_username = f"@{telegram_match.group(1)}"
            
            return {
                'order_id': order_id or f"order_{int(time.time())}",
                'offer_id': 'stars_offer',  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è Stars
                'quantity': 1,
                'buyer_username': buyer or 'unknown',
                'buyer_funpay_login': buyer or 'unknown',
                'total_price': price,
                'currency': currency,
                'status': 'PAID' if '–æ–ø–ª–∞—á–µ–Ω' in status.lower() else 'NEW',
                'created_at': datetime.now().isoformat(),
                'attached_telegram_username': telegram_username,
                'stars_amount_total': self._extract_stars_amount(description or "")
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    def _safe_extract_text(self, element, selector: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            sub_element = element.find_element(By.CSS_SELECTOR, selector)
            return sub_element.text.strip()
        except:
            return ""
    
    def _extract_stars_amount(self, description: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "100 stars", "500 –∑–≤—ë–∑–¥", "1000‚≠ê"
        patterns = [
            r'(\d+)\s*stars?',
            r'(\d+)\s*–∑–≤—ë–∑–¥?',
            r'(\d+)\s*‚≠ê',
            r'(\d+)\s*telegram\s*stars?'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, description.lower())
            if match:
                return int(match.group(1))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 100
    
    async def get_order_details(self, order_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        try:
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {order_id}...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–∫–∞–∑—É
            order_url = f"https://funpay.com/orders/{order_id}/"
            self.driver.get(order_url)
            await asyncio.sleep(3)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
            order_details = self._parse_order_page()
            
            if order_details:
                order_details['order_id'] = order_id
                print("‚úÖ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã")
                return order_details
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    def _parse_order_page(self) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            status_element = self.driver.find_element(By.CSS_SELECTOR, ".order-status, .badge")
            status = status_element.text.strip() if status_element else "unknown"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã
            amount_element = self.driver.find_element(By.CSS_SELECTOR, ".order-sum, .sum")
            amount_text = amount_element.text.strip() if amount_element else "0"
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram username
            chat_messages = self.driver.find_elements(By.CSS_SELECTOR, ".chat-msg-text")
            telegram_username = ""
            
            for message in chat_messages:
                message_text = message.text
                telegram_match = re.search(r'@([a-zA-Z0-9_]{5,32})', message_text)
                if telegram_match:
                    telegram_username = f"@{telegram_match.group(1)}"
                    break
            
            return {
                'status': 'PAID' if '–æ–ø–ª–∞—á–µ–Ω' in status.lower() else 'NEW',
                'attached_telegram_username': telegram_username,
                'payment_status': '–æ–ø–ª–∞—á–µ–Ω' in status.lower()
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    async def verify_payment(self, order_id: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"""
        try:
            order_details = await self.get_order_details(order_id)
            
            if order_details:
                return {
                    'paid': order_details.get('payment_status', False),
                    'paid_at': datetime.now().isoformat() if order_details.get('payment_status') else None,
                    'method': 'funpay',
                    'tx_id': f"funpay_{order_id}"
                }
            else:
                return {
                    'paid': False,
                    'paid_at': None,
                    'method': 'funpay',
                    'tx_id': None
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            return {
                'paid': False,
                'paid_at': None,
                'method': 'funpay',
                'tx_id': None
            }
    
    async def send_message(self, order_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∑–∞–∫–∞–∑–∞"""
        try:
            print(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ {order_id}...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–∫–∞–∑—É
            order_url = f"https://funpay.com/orders/{order_id}/"
            self.driver.get(order_url)
            await asyncio.sleep(3)
            
            # –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "textarea[name='content'], .chat-input"))
            )
            
            # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_input.clear()
            message_input.send_keys(message)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            send_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit'], .btn-primary")
            send_button.click()
            
            await asyncio.sleep(2)
            
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            try:
                self.driver.quit()
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass

# Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockFunPayParser:
    def __init__(self, login: str, password: str, headless: bool = True):
        self.login_cred = login
        self.password = password
        self.is_logged_in = False
        print("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock FunPay Parser –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    async def login(self) -> bool:
        print("üîê Mock: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ FunPay...")
        await asyncio.sleep(1)
        self.is_logged_in = True
        print("‚úÖ Mock: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return True
    
    async def get_orders(self) -> List[Dict]:
        print("üìã Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...")
        await asyncio.sleep(1)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        mock_orders = [
            {
                'order_id': f'mock_order_{int(time.time())}',
                'offer_id': 'stars_offer',
                'quantity': 1,
                'buyer_username': 'test_buyer',
                'buyer_funpay_login': 'test_buyer_funpay',
                'total_price': 500.0,
                'currency': 'RUB',
                'status': 'PAID',
                'created_at': datetime.now().isoformat(),
                'attached_telegram_username': '@testuser',
                'stars_amount_total': 500
            }
        ]
        
        print(f"‚úÖ Mock: –ù–∞–π–¥–µ–Ω–æ {len(mock_orders)} –∑–∞–∫–∞–∑–æ–≤")
        return mock_orders
    
    async def get_order_details(self, order_id: str) -> Optional[Dict]:
        print(f"üìã Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {order_id}...")
        await asyncio.sleep(1)
        
        return {
            'order_id': order_id,
            'offer_id': 'stars_offer',
            'quantity': 1,
            'buyer_username': 'test_buyer',
            'buyer_funpay_login': 'test_buyer_funpay',
            'total_price': 500.0,
            'currency': 'RUB',
            'status': 'PAID',
            'created_at': datetime.now().isoformat(),
            'attached_telegram_username': '@testuser',
            'stars_amount_total': 500,
            'payment_status': True
        }
    
    async def verify_payment(self, order_id: str) -> Dict:
        print(f"üí≥ Mock: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ {order_id}...")
        await asyncio.sleep(1)
        
        return {
            'paid': True,
            'paid_at': datetime.now().isoformat(),
            'method': 'funpay',
            'tx_id': f'mock_tx_{order_id}'
        }
    
    async def send_message(self, order_id: str, message: str) -> bool:
        print(f"üí¨ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ {order_id}: {message[:50]}...")
        await asyncio.sleep(1)
        print("‚úÖ Mock: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    
    def close(self):
        print("‚úÖ Mock: –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        pass
