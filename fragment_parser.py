"""
–ü–∞—Ä—Å–µ—Ä Fragment –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram Stars
"""

import time
import asyncio
from datetime import datetime
from typing import Dict, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import undetected_chromedriver as uc
import re

class FragmentParser:
    def __init__(self, phone_number: str, headless: bool = True):
        self.phone_number = phone_number
        self.headless = headless
        self.driver = None
        self.is_logged_in = False
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Fragment
        self.selectors = {
            'phone_input': 'input[name="phone"]',
            'continue_button': 'button[type="submit"]',
            'code_input': 'input[name="code"]',
            'stars_balance': '.stars-balance, .balance-stars',
            'send_stars_button': '.send-stars, [data-action="send-stars"]',
            'recipient_input': 'input[name="username"], input[placeholder*="username"]',
            'amount_input': 'input[name="amount"], input[placeholder*="amount"]',
            'send_button': 'button[type="submit"], .btn-send',
            'success_message': '.success, .alert-success',
            'error_message': '.error, .alert-error'
        }
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Fragment"""
        try:
            options = uc.ChromeOptions()
            
            if self.headless:
                options.add_argument('--headless')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Fragment
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0
            }
            options.add_experimental_option("prefs", prefs)
            
            self.driver = uc.Chrome(options=options)
            self.driver.implicitly_wait(10)
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è Fragment –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ Fragment: {e}")
            return False
    
    async def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Fragment —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            if not self.driver:
                if not self.setup_driver():
                    return False
            
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Fragment...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Fragment
            self.driver.get("https://fragment.com/")
            await asyncio.sleep(3)
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
            login_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Log in')]"))
            )
            login_button.click()
            await asyncio.sleep(2)
            
            # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, self.selectors['phone_input']))
            )
            phone_input.clear()
            phone_input.send_keys(self.phone_number)
            
            # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            continue_button = self.driver.find_element(By.CSS_SELECTOR, self.selectors['continue_button'])
            continue_button.click()
            
            print("üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞...")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é)
            print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å...")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: ")
            
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            if "fragment.com" in self.driver.current_url and "login" not in self.driver.current_url:
                self.is_logged_in = True
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Fragment —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Fragment")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Fragment: {e}")
            return False
    
    async def get_balance(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Stars"""
        if not self.is_logged_in:
            if not await self.login():
                return {'stars_balance': 0, 'daily_limit_left': 0}
        
        try:
            print("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Stars...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞
            self.driver.get("https://fragment.com/balance")
            await asyncio.sleep(3)
            
            # –ü–æ–∏—Å–∫ –±–∞–ª–∞–Ω—Å–∞ Stars
            balance_text = "0"
            try:
                balance_element = self.driver.find_element(By.CSS_SELECTOR, self.selectors['stars_balance'])
                balance_text = balance_element.text
            except:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                balance_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Stars') or contains(text(), '‚≠ê')]")
                for element in balance_elements:
                    if re.search(r'\d+', element.text):
                        balance_text = element.text
                        break
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
            balance_match = re.search(r'([\d,]+)', balance_text.replace(',', ''))
            stars_balance = int(balance_match.group(1)) if balance_match else 0
            
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å Stars: {stars_balance:,}")
            
            return {
                'stars_balance': stars_balance,
                'daily_limit_left': 100000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {'stars_balance': 0, 'daily_limit_left': 0}
    
    async def transfer_stars(self, to_username: str, stars_amount: int, idempotency_key: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.is_logged_in:
            if not await self.login():
                return {
                    'ok': False,
                    'error_code': 'auth_failed',
                    'error_message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'
                }
        
        try:
            print(f"‚≠ê –û—Ç–ø—Ä–∞–≤–∫–∞ {stars_amount} Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_username}...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars
            self.driver.get("https://fragment.com/stars")
            await asyncio.sleep(3)
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "Send Stars" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π
            send_button = None
            try:
                send_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Send') or contains(text(), 'Transfer')]"))
                )
            except:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
                send_buttons = self.driver.find_elements(By.TAG_NAME, "button")
                for btn in send_buttons:
                    if any(word in btn.text.lower() for word in ['send', 'transfer', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å']):
                        send_button = btn
                        break
            
            if not send_button:
                return {
                    'ok': False,
                    'error_code': 'send_button_not_found',
                    'error_message': '–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }
            
            send_button.click()
            await asyncio.sleep(2)
            
            # –í–≤–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            recipient_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, self.selectors['recipient_input']))
            )
            recipient_input.clear()
            recipient_input.send_keys(to_username.replace('@', ''))  # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            
            # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Stars
            amount_input = self.driver.find_element(By.CSS_SELECTOR, self.selectors['amount_input'])
            amount_input.clear()
            amount_input.send_keys(str(stars_amount))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞
            final_send_button = self.driver.find_element(By.CSS_SELECTOR, self.selectors['send_button'])
            final_send_button.click()
            
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            try:
                success_element = self.driver.find_element(By.CSS_SELECTOR, self.selectors['success_message'])
                if success_element:
                    transfer_id = f"fragment_{idempotency_key}_{int(time.time())}"
                    print(f"‚úÖ Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. ID: {transfer_id}")
                    
                    return {
                        'ok': True,
                        'transfer_id': transfer_id,
                        'error_code': None,
                        'error_message': None
                    }
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
            try:
                error_element = self.driver.find_element(By.CSS_SELECTOR, self.selectors['error_message'])
                error_message = error_element.text if error_element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars: {error_message}")
                
                return {
                    'ok': False,
                    'error_code': 'transfer_failed',
                    'error_message': error_message
                }
            except:
                pass
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
            print("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω")
            return {
                'ok': False,
                'error_code': 'status_unknown',
                'error_message': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars: {e}")
            return {
                'ok': False,
                'error_code': 'exception',
                'error_message': str(e)
            }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            try:
                self.driver.quit()
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä Fragment –∑–∞–∫—Ä—ã—Ç")
            except:
                pass

# Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockFragmentParser:
    def __init__(self, phone_number: str, headless: bool = True):
        self.phone_number = phone_number
        self.is_logged_in = False
        print("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock Fragment Parser –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    async def login(self) -> bool:
        print("üîê Mock: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Fragment...")
        await asyncio.sleep(1)
        self.is_logged_in = True
        print("‚úÖ Mock: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Fragment —É—Å–ø–µ—à–Ω–∞")
        return True
    
    async def get_balance(self) -> Dict:
        print("üí∞ Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Stars...")
        await asyncio.sleep(1)
        
        balance = {
            'stars_balance': 50000,
            'daily_limit_left': 100000
        }
        
        print(f"‚úÖ Mock: –ë–∞–ª–∞–Ω—Å Stars: {balance['stars_balance']:,}")
        return balance
    
    async def transfer_stars(self, to_username: str, stars_amount: int, idempotency_key: str) -> Dict:
        print(f"‚≠ê Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ {stars_amount} Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_username}...")
        await asyncio.sleep(2)
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        transfer_id = f"mock_transfer_{idempotency_key}_{int(time.time())}"
        
        print(f"‚úÖ Mock: Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. ID: {transfer_id}")
        
        return {
            'ok': True,
            'transfer_id': transfer_id,
            'error_code': None,
            'error_message': None
        }
    
    def close(self):
        print("‚úÖ Mock: –ë—Ä–∞—É–∑–µ—Ä Fragment –∑–∞–∫—Ä—ã—Ç")
        pass
