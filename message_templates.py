from config import CURRENCY, PAYMENT_WAIT_MINUTES, AUTO_CLOSE_MIN, FRAGMENT_MIN, FRAGMENT_MAX
from integrations import utils

class MessageTemplates:
    def start_message(self) -> str:
        """Welcome message"""
        return f"""–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∫—É–ø–∏—Ç—å –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å Telegram Stars.

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥) –Ω–∞ FunPay
2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤ –∑–∞–∫–∞–∑–µ –≤–∞—à Telegram @—é–∑–µ—Ä–Ω–µ–π–º ‚Äî –Ω–∞ –Ω–µ–≥–æ –ø—Ä–∏–¥—É—Ç –∑–≤—ë–∑–¥—ã
3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—é –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Fragment.

–ö–æ–º–∞–Ω–¥—ã:
/price ‚Äî —Ü–µ–Ω—ã –∏ –ø–∞–∫–µ—Ç—ã
/help ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/terms ‚Äî —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏"""

    def price_message(self, offers: list) -> str:
        """Price list message"""
        if not offers:
            return "‚ùå –û—Ñ—Ñ–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        message = f"<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã:</b>\n\n"
        
        for offer in offers:
            if offer['is_active']:
                message += f"üì¶ <b>{offer['title']}</b>\n"
                message += f"   ‚≠ê {offer['stars_amount']:,} –∑–≤—ë–∑–¥\n"
                message += f"   üí∞ {offer['price']} {offer['currency']}\n\n"
        
        message += f"<b>–í–∞–ª—é—Ç–∞:</b> {CURRENCY}\n"
        message += "–ö–æ–º–∏—Å—Å–∏–∏ —É–∂–µ —É—á—Ç–µ–Ω—ã –≤ —Ü–µ–Ω–µ."
        
        return message

    def waiting_payment(self, order_data: dict) -> str:
        """Waiting payment message"""
        order_id = order_data['order_id']
        stars_total = order_data['stars_amount_total']
        
        return f"""üìã <b>–ó–∞–∫–∞–∑ ‚Ññ{order_id}</b> –Ω–∞ {stars_total:,} ‚≠ê —Å–æ–∑–¥–∞–Ω

–°—Ç–∞—Ç—É—Å: <b>–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ FunPay.
–Ø –ø—Ä–æ–≤–µ—Ä—é –∏ –≤—ã–¥–∞–º –∑–≤—ë–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

‚è∞ –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ {AUTO_CLOSE_MIN} –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç."""

    def needs_username(self, order_data: dict) -> str:
        """Needs username message"""
        order_id = order_data['order_id']
        
        return f"""‚ùì –í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @—é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à Telegram @—é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example).

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def confirm_username(self, order_data: dict, username: str) -> str:
        """Confirm username message"""
        stars_total = order_data['stars_amount_total']
        normalized_username = utils.normalize_username(username)
        
        return f"""‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {stars_total:,} ‚≠ê –Ω–∞ {normalized_username}?

–ù–∞–ø–∏—à–∏—Ç–µ ¬´–î–∞¬ª, –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π @—é–∑–µ—Ä–Ω–µ–π–º."""

    def needs_balance(self, order_data: dict) -> str:
        """Needs balance message"""
        order_id = order_data['order_id']
        stars_total = order_data['stars_amount_total']
        
        return f"""‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ–ø–ª–∞—á–µ–Ω!

–ú—ã –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–¥–∞—á–∏ {stars_total:,} ‚≠ê.
–ö–∞–∫ —Ç–æ–ª—å–∫–æ Stars –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚Äî –ø—Ä–∏—à–ª—é —á–µ–∫.

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üôè"""

    def fulfillment_success(self, order_data: dict, fulfillment_data: dict = None) -> str:
        """Successful fulfillment message"""
        order_id = order_data['order_id']
        stars_total = order_data['stars_amount_total']
        to_username = utils.normalize_username(order_data['attached_telegram_username'])
        
        message = f"""üéâ <b>–ì–æ—Ç–æ–≤–æ!</b>

–ó–∞–∫–∞–∑ ‚Ññ{order_id}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stars_total:,} ‚≠ê –Ω–∞ {to_username} —á–µ—Ä–µ–∑ Fragment.

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! 

üí° –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —á–µ–∫/—Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ."""

        if fulfillment_data and fulfillment_data.get('batches'):
            batches = fulfillment_data['batches']
            if len(batches) > 1:
                message += f"\n\nüìä <b>–î–µ—Ç–∞–ª–∏ –≤—ã–¥–∞—á–∏:</b>\n"
                for i, batch in enumerate(batches, 1):
                    if batch['status'] == 'ok':
                        transfer_id = utils.mask_transaction_id(batch.get('transfer_id', ''))
                        message += f"   {i}. {batch['amount']:,} ‚≠ê (ID: {transfer_id})\n"
        
        return message

    def partial_fulfillment(self, order_data: dict, sent: int, left: int) -> str:
        """Partial fulfillment message"""
        order_id = order_data['order_id']
        
        return f"""‚ö†Ô∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:</b>

‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent:,} ‚≠ê
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {left:,} ‚≠ê

–î–æ—Å—Ç–∞–≤–∏–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üôè"""

    def fulfillment_failure(self, order_data: dict, error_message: str) -> str:
        """Fulfillment failure message"""
        order_id = order_data['order_id']
        
        return f"""‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Stars –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}

–û—à–∏–±–∫–∞: {error_message}

–ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è. –õ–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É, –ª–∏–±–æ –≤–µ—Ä–Ω—ë–º —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äî –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ.

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."""

    def payment_reminder(self, order_data: dict) -> str:
        """Payment reminder message"""
        order_id = order_data['order_id']
        stars_total = order_data['stars_amount_total']
        
        return f"""‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ {stars_total:,} ‚≠ê –≤—Å—ë –µ—â—ë –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã –Ω–∞ FunPay.

–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –∑–∞–∫–∞–∑ —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {AUTO_CLOSE_MIN} –º–∏–Ω—É—Ç."""

    def help_message(self) -> str:
        """Help message"""
        return f"""üìñ <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:</b>

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ FunPay –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –æ—Ñ—Ñ–µ—Ä
2Ô∏è‚É£ –í –ø–æ–ª–µ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É" —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram @—é–∑–µ—Ä–Ω–µ–π–º
3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
4Ô∏è‚É£ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—é –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∑–≤—ë–∑–¥—ã

<b>–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:</b>
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ @—é–∑–µ—Ä–Ω–µ–π–º —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö
‚Ä¢ –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏: –¥–æ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞: {FRAGMENT_MIN:,} ‚≠ê
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞ —Ä–∞–∑: {FRAGMENT_MAX:,} ‚≠ê

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/price ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã
/order [ID] ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
/terms ‚Äî —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏"""

    def terms_message(self) -> str:
        """Terms and conditions message"""
        return f"""üìã <b>–£—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏ Telegram Stars:</b>

<b>–¶–µ–Ω—ã –∏ –æ–ø–ª–∞—Ç–∞:</b>
‚Ä¢ –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ {CURRENCY}
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ —É–∂–µ —É—á—Ç–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ FunPay (–∫–∞—Ä—Ç—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏)

<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Fragment
‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: –¥–æ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞: {FRAGMENT_MIN:,} ‚≠ê
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞ —Ä–∞–∑: {FRAGMENT_MAX:,} ‚≠ê

<b>–í–æ–∑–≤—Ä–∞—Ç –∏ –æ—Ç–º–µ–Ω–∞:</b>
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –¥–æ –æ–ø–ª–∞—Ç—ã ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –û–¥–∏–Ω –∑–∞–∫–∞–∑ –Ω–∞ –æ–¥–∏–Ω @—é–∑–µ—Ä–Ω–µ–π–º
‚Ä¢ –ó–∞–∫–∞–∑—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è @—é–∑–µ—Ä–Ω–µ–π–º–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ {AUTO_CLOSE_MIN} –º–∏–Ω—É—Ç

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
‚Ä¢ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤"""

    def order_status(self, order_data: dict, fulfillment_data: dict = None) -> str:
        """Order status message"""
        order_id = order_data['order_id']
        status = order_data['status']
        stars_total = order_data['stars_amount_total']
        created_at = order_data['created_at']
        
        # Format date
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            formatted_date = dt.strftime('%d.%m.%Y %H:%M')
        except:
            formatted_date = created_at
        
        message = f"""üìã <b>–ó–∞–∫–∞–∑ ‚Ññ{order_id}</b>

üìÖ –°–æ–∑–¥–∞–Ω: {formatted_date}
‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stars_total:,} –∑–≤—ë–∑–¥
üí∞ –°—É–º–º–∞: {order_data['total_price']} {order_data['currency']}
üìä –°—Ç–∞—Ç—É—Å: <b>{self._format_status(status)}</b>"""

        if order_data.get('attached_telegram_username'):
            username = utils.normalize_username(order_data['attached_telegram_username'])
            message += f"\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {username}"

        if fulfillment_data:
            fulfillment_status = fulfillment_data['status']
            message += f"\nüöÄ –í—ã–¥–∞—á–∞: <b>{self._format_fulfillment_status(fulfillment_status)}</b>"
            
            if fulfillment_data.get('batches'):
                batches = fulfillment_data['batches']
                successful = sum(1 for b in batches if b['status'] == 'ok')
                total = len(batches)
                message += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {successful}/{total} –±–∞—Ç—á–µ–π"

        return message

    def admin_orders_list(self, orders: list) -> str:
        """Admin orders list message"""
        if not orders:
            return "üìã –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        message = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
        
        for order in orders:
            status_emoji = self._get_status_emoji(order['status'])
            message += f"{status_emoji} <b>‚Ññ{order['order_id']}</b>\n"
            message += f"   ‚≠ê {order['stars_amount_total']:,} | "
            message += f"üí∞ {order['total_price']} {order['currency']}\n"
            message += f"   üë§ {order['buyer_username']} | "
            message += f"üìä {order['status']}\n"
            message += f"   üìÖ {order['created_at'][:16]}\n\n"
        
        return message

    def admin_balance(self, balance: dict) -> str:
        """Admin balance message"""
        return f"""üí∞ <b>–ë–∞–ª–∞–Ω—Å Fragment:</b>

‚≠ê –ó–≤—ë–∑–¥: {balance['stars_balance']:,}
üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {balance['daily_limit_left']:,}"""

    def admin_ping(self, services_status: dict) -> str:
        """Admin ping message"""
        message = "üèì <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n\n"
        
        for service, status in services_status.items():
            emoji = "‚úÖ" if status['ok'] else "‚ùå"
            message += f"{emoji} <b>{service}:</b> "
            message += f"{'OK' if status['ok'] else 'ERROR'}"
            if not status['ok'] and status.get('error'):
                message += f" ({status['error']})"
            message += "\n"
        
        return message

    def _format_status(self, status: str) -> str:
        """Format order status for display"""
        status_map = {
            'NEW': 'üÜï –ù–æ–≤—ã–π',
            'WAITING_PAYMENT': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            'PAID': '‚úÖ –û–ø–ª–∞—á–µ–Ω',
            'FULFILLING': 'üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
            'FULFILLED': 'üéâ –í—ã–ø–æ–ª–Ω–µ–Ω',
            'NEEDS_USERNAME': '‚ùì –ù—É–∂–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º',
            'NEEDS_BALANCE': 'üí∞ –û–∂–∏–¥–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
            'FAILED': '‚ùå –û—à–∏–±–∫–∞',
            'PARTIALLY_FULFILLED': '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω'
        }
        return status_map.get(status, status)

    def _format_fulfillment_status(self, status: str) -> str:
        """Format fulfillment status for display"""
        status_map = {
            'PENDING': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'SUCCESS': '‚úÖ –£—Å–ø–µ—à–Ω–æ',
            'FAILED': '‚ùå –û—à–∏–±–∫–∞',
            'PARTIAL': '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ'
        }
        return status_map.get(status, status)

    def _get_status_emoji(self, status: str) -> str:
        """Get emoji for status"""
        emoji_map = {
            'NEW': 'üÜï',
            'WAITING_PAYMENT': '‚è≥',
            'PAID': '‚úÖ',
            'FULFILLING': 'üöÄ',
            'FULFILLED': 'üéâ',
            'NEEDS_USERNAME': '‚ùì',
            'NEEDS_BALANCE': 'üí∞',
            'FAILED': '‚ùå',
            'PARTIALLY_FULFILLED': '‚ö†Ô∏è'
        }
        return emoji_map.get(status, 'üìã')
