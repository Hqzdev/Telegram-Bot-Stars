#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import OrderStatus, FulfillmentStatus
from database import db
from integrations import utils
from logging_system import OrderLogger

class MockNotificationService:
    async def notify_user(self, chat_id, message):
        print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {message[:50]}...")
    
    async def notify_admin(self, message):
        print(f"üë®‚Äçüíº –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {message[:100]}...")

async def test_logging_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ notification service
    notification_service = MockNotificationService()
    logger = OrderLogger(notification_service)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    test_order = {
        'order_id': 'test_order_002',
        'stars_amount_total': 500,
        'total_price': 450.0,
        'currency': 'RUB',
        'buyer_username': 'test_buyer',
        'attached_telegram_username': '@test_recipient'
    }
    
    test_fulfillment = {
        'fulfillment_id': 'fulfill_test_002',
        'status': FulfillmentStatus.SUCCESS
    }
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await logger.log_order_completion(test_order, test_fulfillment)
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü
    monthly_stats = await logger.get_monthly_statistics()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {monthly_stats}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    all_time_stats = await logger.get_all_time_statistics()
    print(f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {all_time_stats}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    recent_orders = logger.get_recent_orders(5)
    print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã: {len(recent_orders)} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
    logger.log_error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞", "test_order_003", {"context": "test"})
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞
    logger.log_admin_action(123456789, "test_action", {"details": "test"})
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

async def test_currency_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç...")
    
    notification_service = MockNotificationService()
    logger = OrderLogger(notification_service)
    
    # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç
    test_cases = [
        (100, 'RUB', 100.0),
        (10, 'USD', 950.0),
        (5, 'EUR', 525.0),
        (20, 'USDT', 1900.0)
    ]
    
    for amount, currency, expected in test_cases:
        result = logger._convert_to_rub(amount, currency)
        status = "‚úÖ" if abs(float(result) - expected) < 0.01 else "‚ùå"
        print(f"{status} {amount} {currency} ‚Üí {result} ‚ÇΩ (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected} ‚ÇΩ)")

async def test_database_logs():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ order_logs —Å–æ–∑–¥–∞–Ω–∞
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='order_logs'")
            result = cursor.fetchone()
            
            if result:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor.execute("SELECT COUNT(*) FROM order_logs")
                count = cursor.fetchone()[0]
                print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                cursor.execute("""
                    SELECT order_id, stars_amount, price_rub, buyer_username 
                    FROM order_logs 
                    ORDER BY timestamp DESC 
                    LIMIT 3
                """)
                rows = cursor.fetchall()
                
                for row in rows:
                    print(f"   üìã {row[0]}: {row[1]} ‚≠ê, {row[2]} ‚ÇΩ, {row[3]}")
                    
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ order_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n")
    
    try:
        await test_logging_system()
        await test_currency_conversion()
        await test_database_logs()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
