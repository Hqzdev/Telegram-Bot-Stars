#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤ FunPay –∏ Fragment
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from funpay_parser import FunPayParser, MockFunPayParser
from fragment_parser import FragmentParser, MockFragmentParser
from integrations import FunPayAPI, FragmentAPI

class MockNotificationService:
    async def notify_user(self, chat_id, message):
        print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {message[:50]}...")
    
    async def notify_admin(self, message):
        print(f"üë®‚Äçüíº –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {message[:100]}...")

async def test_funpay_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ FunPay"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FunPay –ø–∞—Ä—Å–µ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ mock –ø–∞—Ä—Å–µ—Ä–∞
    parser = MockFunPayParser("test_login", "test_password")
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    login_result = await parser.login()
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {login_result}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    orders = await parser.get_orders()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
    
    if orders:
        order = orders[0]
        print(f"   üìã –ó–∞–∫–∞–∑: {order['order_id']}")
        print(f"   ‚≠ê –ó–≤—ë–∑–¥—ã: {order['stars_amount_total']}")
        print(f"   üí∞ –¶–µ–Ω–∞: {order['total_price']} {order['currency']}")
        print(f"   üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order['buyer_username']}")
        print(f"   üì± Telegram: {order['attached_telegram_username']}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    if orders:
        order_details = await parser.get_order_details(orders[0]['order_id'])
        print(f"‚úÖ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: {order_details}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
    payment_status = await parser.verify_payment("test_order_123")
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {payment_status}")
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_result = await parser.send_message("test_order_123", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_result}")
    
    # –û—á–∏—Å—Ç–∫–∞
    parser.close()

async def test_fragment_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Fragment"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fragment –ø–∞—Ä—Å–µ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ mock –ø–∞—Ä—Å–µ—Ä–∞
    parser = MockFragmentParser("+1234567890")
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    login_result = await parser.login()
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {login_result}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    balance = await parser.get_balance()
    print(f"‚úÖ –ë–∞–ª–∞–Ω—Å: {balance['stars_balance']:,} ‚≠ê")
    print(f"   üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {balance['daily_limit_left']:,}")
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars
    transfer_result = await parser.transfer_stars(
        "@testuser", 
        100, 
        "test_key_123"
    )
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ Stars: {transfer_result}")
    
    # –û—á–∏—Å—Ç–∫–∞
    parser.close()

async def test_integrations():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ notification service
    notification_service = MockNotificationService()
    
    # –¢–µ—Å—Ç FunPay API
    funpay_api = FunPayAPI()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤
    offers = await funpay_api.list_offers()
    print(f"‚úÖ FunPay –æ—Ñ—Ñ–µ—Ä—ã: {len(offers)}")
    
    for offer in offers:
        print(f"   üì¶ {offer['title']}: {offer['price']} {offer['currency']}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = await funpay_api.get_order("test_order_123")
    print(f"‚úÖ FunPay –∑–∞–∫–∞–∑: {order['order_id']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    payment = await funpay_api.verify_payment("test_order_123")
    print(f"‚úÖ FunPay –æ–ø–ª–∞—Ç–∞: {payment['paid']}")
    
    # –¢–µ—Å—Ç Fragment API
    fragment_api = FragmentAPI()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    balance = await fragment_api.get_balance()
    print(f"‚úÖ Fragment –±–∞–ª–∞–Ω—Å: {balance['stars_balance']:,} ‚≠ê")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ Stars
    transfer = await fragment_api.transfer_stars(
        "@testuser", 
        100, 
        "test_transfer_key"
    )
    print(f"‚úÖ Fragment –æ—Ç–ø—Ä–∞–≤–∫–∞: {transfer['ok']}")
    
    if transfer['ok']:
        print(f"   üÜî Transfer ID: {transfer['transfer_id']}")

async def test_parser_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ API –æ–±—ä–µ–∫—Ç–æ–≤
    funpay_api = FunPayAPI()
    fragment_api = FragmentAPI()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    print("üìã –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞...")
    
    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    orders = await funpay_api.list_offers()
    if not orders:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_id = "test_order_workflow"
    order_details = await funpay_api.get_order(order_id)
    print(f"üìã –ó–∞–∫–∞–∑ {order_id}: {order_details['stars_amount_total']} ‚≠ê")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    payment_status = await funpay_api.verify_payment(order_id)
    if payment_status['paid']:
        print("‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Fragment
        balance = await fragment_api.get_balance()
        stars_needed = order_details['stars_amount_total']
        
        if balance['stars_balance'] >= stars_needed:
            print(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞: {balance['stars_balance']:,} ‚≠ê")
            
            # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ Stars
            telegram_username = order_details.get('attached_telegram_username', '@testuser')
            transfer_result = await fragment_api.transfer_stars(
                telegram_username,
                stars_needed,
                f"workflow_{order_id}"
            )
            
            if transfer_result['ok']:
                print(f"‚úÖ Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! ID: {transfer_result['transfer_id']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {transfer_result['error_message']}")
        else:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞: –Ω—É–∂–Ω–æ {stars_needed}, –µ—Å—Ç—å {balance['stars_balance']}")
    else:
        print("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤ FunPay –∏ Fragment\n")
    
    try:
        await test_funpay_parser()
        await test_fragment_parser()
        await test_integrations()
        await test_parser_workflow()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ env_example.txt")
        print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã mock –ø–∞—Ä—Å–µ—Ä—ã.")
    
    asyncio.run(main())
