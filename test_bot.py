#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram Stars Bot
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import OrderStatus, FulfillmentStatus
from database import db
from integrations import funpay, fragment, utils
from message_templates import MessageTemplates

async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    test_order = {
        'order_id': 'test_order_001',
        'offer_id': 'offer_1',
        'quantity': 2,
        'buyer_username': 'test_user',
        'buyer_funpay_login': 'test_funpay',
        'total_price': 200.0,
        'currency': 'RUB',
        'status': OrderStatus.NEW,
        'attached_telegram_username': '@testuser',
        'created_at': utils.now(),
        'stars_amount_total': 200
    }
    
    db.save_order(test_order)
    print("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    retrieved_order = db.get_order('test_order_001')
    if retrieved_order:
        print(f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω: {retrieved_order['order_id']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è fulfillment
    fulfillment_record = {
        'order_id': 'test_order_001',
        'to_username': '@testuser',
        'stars_total': 200,
        'batches': [
            {'amount': 200, 'transfer_id': 'tr_test_001', 'status': 'ok'}
        ],
        'status': FulfillmentStatus.SUCCESS,
        'created_at': utils.now(),
        'updated_at': utils.now(),
        'notes': 'test fulfillment'
    }
    
    fulfillment_id = db.create_fulfillment(fulfillment_record)
    print(f"‚úÖ Fulfillment —Å–æ–∑–¥–∞–Ω: {fulfillment_id}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è fulfillment
    fulfillment = db.get_fulfillment_by_order('test_order_001')
    if fulfillment:
        print(f"‚úÖ Fulfillment –ø–æ–ª—É—á–µ–Ω: {fulfillment['status']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fulfillment")

async def test_integrations():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    
    # –¢–µ—Å—Ç FunPay
    try:
        offers = await funpay.list_offers()
        print(f"‚úÖ FunPay offers –ø–æ–ª—É—á–µ–Ω—ã: {len(offers)} –æ—Ñ—Ñ–µ—Ä–æ–≤")
        
        order_data = await funpay.get_order('test_order_001')
        print(f"‚úÖ FunPay order –ø–æ–ª—É—á–µ–Ω: {order_data['order_id']}")
        
        payment_status = await funpay.verify_payment('test_order_001')
        print(f"‚úÖ FunPay payment –ø—Ä–æ–≤–µ—Ä–µ–Ω: {payment_status['paid']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FunPay: {e}")
    
    # –¢–µ—Å—Ç Fragment
    try:
        balance = await fragment.get_balance()
        print(f"‚úÖ Fragment balance –ø–æ–ª—É—á–µ–Ω: {balance['stars_balance']} ‚≠ê")
        
        transfer_result = await fragment.transfer_stars(
            '@testuser', 
            100, 
            utils.generate_idempotency_key('test_order_001', '@testuser', 100)
        )
        print(f"‚úÖ Fragment transfer: {transfer_result['ok']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Fragment: {e}")

async def test_utils():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞
    test_usernames = [
        'testuser',      # ‚úÖ
        '@testuser',     # ‚úÖ
        'test',          # ‚ùå (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)
        'test@user',     # ‚ùå (–Ω–µ–≤–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
        'a' * 33,        # ‚ùå (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
    ]
    
    for username in test_usernames:
        is_valid = utils.validate_username(username)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"{status} {username}: {is_valid}")
    
    # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞
    normalized = utils.normalize_username('testuser')
    print(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: testuser ‚Üí {normalized}")
    
    # –¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –±–∞—Ç—á–∏
    batches = utils.split_stars_into_batches(25000, 20000)
    print(f"‚úÖ –†–∞–∑–±–∏–≤–∫–∞ 25000 –Ω–∞ –±–∞—Ç—á–∏: {batches}")
    
    # –¢–µ—Å—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è ID
    masked = utils.mask_transaction_id('tx_1234567890abcdef')
    print(f"‚úÖ –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ ID: {masked}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ idempotency key
    key = utils.generate_idempotency_key('order_001', '@user', 100)
    print(f"‚úÖ Idempotency key: {key[:20]}...")

async def test_message_templates():
    """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    templates = MessageTemplates()
    
    # –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    start_msg = templates.start_message()
    print(f"‚úÖ Start message: {len(start_msg)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö
    test_offers = [
        {
            'offer_id': 'offer_1',
            'title': '100 Telegram Stars',
            'stars_amount': 100,
            'price': 100.0,
            'currency': 'RUB',
            'is_active': True
        }
    ]
    price_msg = templates.price_message(test_offers)
    print(f"‚úÖ Price message: {len(price_msg)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
    test_order = {
        'order_id': 'test_order_001',
        'status': OrderStatus.FULFILLED,
        'stars_amount_total': 200,
        'total_price': 200.0,
        'currency': 'RUB',
        'created_at': utils.now(),
        'attached_telegram_username': '@testuser'
    }
    status_msg = templates.order_status(test_order)
    print(f"‚úÖ Status message: {len(status_msg)} —Å–∏–º–≤–æ–ª–æ–≤")

async def test_order_processor():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
    
    # –°–æ–∑–¥–∞—ë–º –º–æ–∫ notification service
    class MockNotificationService:
        async def notify_user(self, chat_id, message):
            print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {message[:50]}...")
        
        async def notify_admin(self, message):
            print(f"üë®‚Äçüíº –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {message[:50]}...")
    
    from order_processor import OrderProcessor
    processor = OrderProcessor(MockNotificationService())
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    try:
        await processor.process_order('test_order_001', 123456789)
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram Stars Bot\n")
    
    try:
        await test_database()
        await test_integrations()
        await test_utils()
        await test_message_templates()
        await test_order_processor()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ env_example.txt")
        print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ.")
    
    asyncio.run(main())
